AI MEDICAL DIAGNOSIS PLATFORM - TECHNOLOGY STACK
==================================================

BACKEND STACK:
--------------
Language:           Python 3.11
AI Framework:       LangGraph (LangChain-based agent orchestration)
Web Framework:      FastAPI (REST APIs + async support)
Model Loading:      llama-cpp-python[cublas] (GPU-accelerated local LLM)
Image Processing:   PyTorch + torchvision + PIL (EfficientNet skin lesion classification)
Database:           Supabase (PostgreSQL-based cloud database)
Authentication:     JWT cookies + Supabase Auth
Document Export:    ReportLab (PDF) + python-docx (Word)
Vector Search:      sentence-transformers (semantic embeddings)
Environment:        python-dotenv (configuration management)

FRONTEND STACK:
---------------
Language:           TypeScript
Framework:          React 18 (functional components + hooks)
Routing:            React Router DOM
Styling:            styled-components + CSS custom properties
State Management:   Custom hooks (useDiagnosis, useAuth)
HTTP Client:        Fetch API with FormData (file uploads)
Build Tool:         Create React App (CRA)
Authentication:     Context API + HTTP cookies

AI MODELS:
----------
Primary LLM:        Llama-3.1-8B-UltraMedical.Q8_0.gguf (local quantized model)
Image Classification: EfficientNetB0 (skin lesion analysis)
Embeddings:         all-MiniLM-L6-v2 (sentence transformers)
Inference:          CUDA acceleration (16 GPU layers) + CPU fallback

ARCHITECTURE PATTERN:
--------------------
Backend:            Node-based workflow orchestration (LangGraph)
Frontend:           Component-based SPA with workflow routing
Communication:      REST API with session-based state management
Data Flow:          Multi-modal input → AI processing → structured output
Authentication:     Cookie-based sessions with JWT

WORKFLOW NODES:
---------------
1. LLMDiagnosisNode          → Initial symptom analysis
2. FollowUpInteractionNode   → Enhanced questioning (standard/skin screening)
3. ImageClassificationNode   → Medical image analysis (skin lesions)
4. OverallAnalysisNode       → Comprehensive diagnosis synthesis
5. MedicalReportNode         → Report generation + export

DATABASE SCHEMA:
----------------
Users Table:        Authentication + profile data
Medical Reports:    Session history + analysis results
Workflow States:    Multi-step diagnosis tracking

DEPLOYMENT:
-----------
Backend:            Local development (uvicorn) → Production (Docker/Cloud)
Frontend:           Local development (npm start) → Production (npm build)
Models:             Local filesystem → Cloud storage/CDN
Database:           Supabase cloud → Self-hosted PostgreSQL option

KEY FEATURES:
-------------
✅ Multi-modal AI diagnosis (text + image)
✅ Adaptive workflow routing (4 different paths)
✅ ABCDE skin cancer screening
✅ Real-time confidence scoring
✅ Medical report generation (PDF/Word/Text)
✅ User authentication + session persistence
✅ Responsive design + accessibility
✅ GPU-accelerated inference
✅ Export functionality + medical history

TECHNICAL HIGHLIGHTS:
--------------------
- LangGraph workflow orchestration for complex medical logic
- Local LLM inference with GPU acceleration for privacy
- Multi-format medical report export (PDF/Word/Text)
- Adaptive UI routing based on AI decisions
- ABCDE criteria implementation for skin cancer screening
- Session-based state management across multiple workflow steps
- Type-safe TypeScript integration with Python backend schemas
- Optimized model loading with memory management
- Comprehensive error handling + fallback mechanisms

EXTERNAL SERVICES:
------------------
Database:           Supabase (PostgreSQL + Auth + Real-time)
Maps/Location:      Google Maps API (healthcare facility search)
File Storage:       Local filesystem + optional cloud storage
Email:              Supabase Auth (registration/password reset)

DEVELOPMENT TOOLS:
------------------
Backend Testing:    Custom test scripts + performance benchmarks
Frontend Debug:     React DevTools + Chrome DevTools
API Testing:        Built-in health checks + connection testing
Model Validation:   Automated accuracy + performance testing
Code Quality:       TypeScript strict mode + Python type hints

Layer                   Technology                          Purpose
================================================================================
AI Layer               Llama3.1-8B                         Large Language Model
Backend API            FastAPI + Python                    REST endpoints & business logic
Authentication         Supabase Auth + JWT                 User management & sessions
Database              Supabase PostgreSQL                  Data persistence & history
Frontend              React + TypeScript                   User interface & interaction
Styling               styled-components + CSS              UI design & responsiveness
Models                llama-cpp-python + PyTorch          Local AI inference
Image Processing      EfficientNet + PIL                   Medical image classification
Document Export       ReportLab + python-docx             Medical report generation
State Management      Custom hooks + Context API          Frontend state coordination
Deployment            Local development → Cloud            Scalable production deployment
================================================================================